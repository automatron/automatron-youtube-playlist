#! /usr/bin/env python

from ConfigParser import SafeConfigParser
import urllib
import sys
import json


def syntax():
        print >>sys.stderr
        print >>sys.stderr, 'To import a client ID and secret use:'
        print >>sys.stderr, '%s <ini file> import <client authentication json file>' % sys.argv[0]
        print >>sys.stderr
        print >>sys.stderr, 'To link a playlist to a channel or server use:'
        print >>sys.stderr, '%s <ini file> playlist <playlist ID>' % sys.argv[0]
        print >>sys.stderr
        sys.exit(1)


def insert_config(cursor, server, channel, key, value):
    cursor.execute('''
        INSERT INTO
            config
        (
            section,
            server,
            channel,
            key,
            value
        )
        VALUES (
            'plugin.youtube_playlist',
            %s,
            %s,
            %s,
            %s
        )
    ''', (server, channel, key, value))


def import_client_secret(db, client_secret_path):
    with open(client_secret_path) as fp:
        client_secret = json.load(fp)['installed']

    cursor = db.cursor()
    insert_config(cursor, None, None, 'client_id', client_secret['client_id'])
    insert_config(cursor, None, None, 'client_secret', client_secret['client_secret'])
    insert_config(cursor, None, None, 'auth_uri', client_secret['auth_uri'])
    insert_config(cursor, None, None, 'token_uri', client_secret['token_uri'])
    db.commit()

    print 'Loaded client credentials.'


def link_playlist(db, playlist_id):
    cursor = db.cursor()
    cursor.execute('''
        SELECT
            key, value
        FROM
            config
        WHERE
            server IS NULL AND
            channel IS NULL AND
            key IN (
                'client_id',
                'client_secret',
                'auth_uri',
                'token_uri'
            )
    ''')
    config = dict(cursor.fetchall())

    if not 'client_id' in config or \
            not 'client_secret' in config or \
            not 'auth_uri' in config or \
            not 'token_uri' in config:
        print >>sys.stderr, 'Incomplete client credentials please try re-importing them.'
        sys.exit(1)

    server = raw_input('Server: ')
    if not server:
        server = None

    channel = raw_input('Channel: ')
    if not channel:
        channel = None

    url = config['auth_uri'] + '?' + urllib.urlencode({
        'scope': 'https://www.googleapis.com/auth/youtube',
        'redirect_uri': 'urn:ietf:wg:oauth:2.0:oob',
        'response_type': 'code',
        'client_id': config['client_id'],
    })
    print 'Please visit the following URL and accept the permission request:'
    print url
    print

    code = raw_input('Response code: ')
    if not code:
        print >>sys.stderr, 'Missing response code, exiting.'
        sys.exit(1)

    data = {
        'code': code,
        'redirect_uri': 'urn:ietf:wg:oauth:2.0:oob',
        'grant_type': 'authorization_code',
        'client_id': config['client_id'],
        'client_secret': config['client_secret'],
    }

    fp = urllib.urlopen(config['token_uri'], data=urllib.urlencode(data))
    data = fp.read()
    fp.close()

    response = json.loads(data)
    if 'error' in response:
        print >>sys.stderr, response['error_description']
        sys.exit(1)

    insert_config(cursor, server, channel, 'playlist_id', playlist_id)
    insert_config(cursor, server, channel, 'access_token', response['access_token'])
    if 'refresh_token' in response:
        insert_config(cursor, server, channel, 'refresh_token', response['refresh_token'])
    db.commit()

    print 'The authorization is saved.'


def main():
    if len(sys.argv) < 3:
        syntax()

    with open(sys.argv[1]) as fp:
        config = SafeConfigParser()
        config.readfp(fp)

        db_section = dict(config.items('database'))
        dbapi_name = db_section.pop('dbapi')
        dbapi_module = __import__(dbapi_name)

    command = sys.argv[2]

    if command == 'import':
        if len(sys.argv) != 4:
            syntax()

        db = dbapi_module.connect(**db_section)
        import_client_secret(db, sys.argv[3])
        db.close()

    elif command == 'playlist':
        if len(sys.argv) != 4:
            syntax()

        db = dbapi_module.connect(**db_section)
        link_playlist(db, sys.argv[3])
        db.close()

    else:
        syntax()

if __name__ == '__main__':
    main()
